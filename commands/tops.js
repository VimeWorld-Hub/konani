const VW = require('../libs/vimelibrary')
const config = require('../config')
const {Keyboard} = require('vk-io')
const messages = require("../libs/messages");

const VimeLibrary = new VW.User(config.vimeworld.dev_token)
const VimeUtils = new VW.Utils()

module.exports.info = {
    name: 'tops',
    usage: "<–∏–≥—Ä–æ–∫>",
    aliases: ['tops', '—Ç–æ–ø—ã', '—Ç–æ–ø—Å', 'topi', '–µ—â–∑—ã', 'njgs', 't'],
    description: '–≤—Å–µ –º–∏–Ω–∏-–∏–≥—Ä—ã, –≥–¥–µ –∏–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–ø-1000',
    permission: 1,
    enabled: true,
    sponsor: [],
    help: true
};

module.exports.run = async (context, params) => {
    try {
        if (!params || !params[1]) return context.reply(`üîé –í—ã –∑–∞–±—ã–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${params[0]} ${this.info.usage}`)

        const symbols = params[1].split('')
        if (!await messages.testUsername(params[1])) return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ _`)

        if ((symbols.length < 3 || symbols.length > 16) && symbols[0] !== "=")
            return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3-—Ö –¥–æ 16-–∏ —Å–∏–º–≤–æ–ª–æ–≤`)

        const player = await VimeLibrary.leaderboards(params[1], "nick")
        if (!player.user || !player.user.id) return context.reply('üîé –ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

        const topList = ['']
        await VimeUtils.topsCache(config.vimeworld.dev_token)

        for (const top of player.leaderboards) {
            topList.push(await VimeUtils.getTops(top.type, top.sort, config.vimeworld.dev_token) + ` - ${top.place} –º–µ—Å—Ç–æ`)
        }

        let rank = (await VimeUtils.getRank(player.user.rank, config.vimeworld.dev_token)).prefix
        rank = (rank.split('').length >= 1) ? `[${rank}] ` : ``

        const message = (topList.length >= 2) ? `üèÖ ${rank}${player.user.username} —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–ø-1000:\n`
            + topList.join('\n‚óè ')
            + `\n\nüìÉ –í—Å–µ–≥–æ: ${topList.length - 1}` : `üéñ ${rank}${player.user.username} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ç–æ–ø-1000`

        context.reply({
            message: message,
            keyboard: Keyboard.builder()
                .textButton({
                    label: "üë®‚Äçüíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    payload: `stats:${player.user.username}`,
                    color: Keyboard.SECONDARY_COLOR
                })
                .textButton({
                    label: "üëï –°–∫–∏–Ω",
                    payload: `skin:${player.user.username}`,
                    color: Keyboard.SECONDARY_COLOR
                })
                .inline()
        })
    } catch (e) {
        context.reply(`‚ö† –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n${e}`)
    }
}

module.exports.runPayload = async (context) => {
    this.run(context, context.messagePayload.split(':'))
}