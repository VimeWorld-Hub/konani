const VW = require('../libs/vimelibrary')
const messages = require("../libs/messages");

const VimeUser = new VW.User('')

module.exports.info = {
    name: 'boostb',
    usage: "<–∏–≥—Ä–æ–∫>?",
    aliases: ['boostb'],
    description: '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –Ω–∞ MiniGames',
    permission: 2,
    enabled: true,
    sponsor: [],
    help: true
};

module.exports.run = async (context, delim) => {
    try {
        if (!delim) delim = context.text.split(" ")

        const symbols = delim[1].split('')
        if (delim[1].toLowerCase().includes("@me")) {
            const get = await new messages.User().getNick(context)
            if (get) {
                delim[1] = get
            } else {
                return context.send({
                    message: `üì≤ –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: /setnick <–Ω–∏–∫>`,
                    reply_to: context.message.id
                })
            }
        }
        if (!await messages.testUsername(delim[1])) return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ _`)

        if ((symbols.length < 3 || symbols.length > 16) && symbols[0] !== "=")
            return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3-—Ö –¥–æ 16-–∏ —Å–∏–º–≤–æ–ª–æ–≤`)

        const res = await VimeUser.matches(delim[1], 'nick')
        if (!res || !res.user) return context.reply(`üîé –ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        else if (res.matches.length < 1) return context.reply(`üîé –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π`)

        const ls = []
        for (const match of res.matches) {
            ls.push(`https://vimetop.ru/matches#${match.id}`)
        }
        context.reply({
            message: ls.join('\n')
        })
    } catch (e) {
        context.reply(`‚ö† –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n${e}`)
    }
};

module.exports.runPayload = async (context) => {
    this.run(context, context.messagePayload.split(':'))
};