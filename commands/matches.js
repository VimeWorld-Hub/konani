const Mess = require('../libs/messages')
const {Keyboard} = require('vk-io')
const config = require('../config')
const VW = require('../libs/vimelibrary')
const messages = require("../libs/messages");

const VimeLibrary = new VW.Match(config.vimeworld.dev_token)
const VimeUser = new VW.User(config.vimeworld.dev_token)
const VimeUtils = new VW.Utils()

module.exports.info = {
    name: 'matches',
    usage: "<–∏–≥—Ä–æ–∫>?",
    aliases: ['matches', '–º–∞—Ç—á–∏', 'last_matches'],
    description: '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ –Ω–∞ MiniGames',
    permission: 1,
    enabled: true,
    sponsor: [],
    help: true
};

module.exports.run = async (context, delim) => {
    try {
        if (!delim) delim = context.text.split(" ")

        if (delim[1]) {
            const symbols = delim[1].split('')
            if (delim[1].toLowerCase().includes("@me")) {
                const get = await new messages.User().getNick(context)
                if (get) {
                    delim[1] = get
                } else {
                    return context.send({
                        message: `üì≤ –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: /setnick <–Ω–∏–∫>`,
                        reply_to: context.message.id
                    })
                }
            }
            if (!await messages.testUsername(delim[1])) return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ _`)

            if ((symbols.length < 3 || symbols.length > 16) && symbols[0] !== "=")
                return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3-—Ö –¥–æ 16-–∏ —Å–∏–º–≤–æ–ª–æ–≤`)

            const res = await VimeUser.matches(delim[1], 'nick')
            if (!res || !res.user) return context.reply(`üîé –ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
            else if (res.matches.length < 1) return context.reply(`üîé –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π`)

            const list = await matchInfo(res.matches)

            let rank = (await VimeUtils.getRank(res.user.rank, config.vimeworld.dev_token)).prefix
            rank = (rank.split('').length >= 1) ? `[${rank}] ` : ``

            let wins = 0
            for (const match of res.matches) {
                if (match.win) wins += 1
            }

            const header = (context.messagePayload)
                ? ''
                : `üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏ ${rank}${res.user.username}:\n\n`
            const body = list.join("\n")
            const footer = `\n\nüèÜ –ü–æ–±–µ–¥: ${wins}/${res.matches.length} (${Math.floor((wins / res.matches.length) * 100)}%)`

            const mess = new Mess.Message(header, body, footer)

            context.reply({
                message: await mess.get(),
                keyboard: Keyboard.builder()
                    .textButton({
                        label: "üë®‚Äçüíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        payload: `stats:${res.user.username}`,
                        color: Keyboard.SECONDARY_COLOR
                    })
                    .textButton({
                        label: "üëï –°–∫–∏–Ω",
                        payload: `skin:${res.user.username}`,
                        color: Keyboard.SECONDARY_COLOR
                    })
                    .inline()
            })

            return
        }
        const res = await VimeLibrary.latest()
        const list = await matchInfo(res)

        const header = (context.messagePayload)
            ? ''
            : 'üèì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:\n'
        const body = list.join("\n")
        const footer = ``

        const mess = new Mess.Message(header, body, footer)

        context.reply({
            message: await mess.get(),
            keyboard: Keyboard.builder()
                .textButton({
                    label: "üìä –û–±–Ω–æ–≤–∏—Ç—å",
                    payload: this.info.name,
                    color: Keyboard.SECONDARY_COLOR
                })
                .inline()
        })
    } catch (e) {
        context.reply(`‚ö† –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n${e}`)
    }
};

module.exports.runPayload = async (context) => {
    this.run(context, context.messagePayload.split(':'))
};

async function matchInfo(matches) {
    const list = []
    await VimeUtils.gamesCache(config.vimeworld.dev_token)

    for (const match of matches) {
        let dur = Math.floor(match.duration / 60)
        if (dur == 0) dur = `${match.duration} —Å–µ–∫`
        else if (dur >= 60) dur = `${Math.floor(dur / 60)} —á–∞—Å`
        else dur = `${dur} –º–∏–Ω`

        if (match.win != null) {
            list.push(`${(match.win == true) ? 'üåï' : 'üåë'} ${await VimeUtils.getGame(match.game, config.vimeworld.dev_token)}: ${(match.map && match.map.name) ? `${match.map.name}` : `-`}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${dur}.`)
        } else {
            list.push(`‚óè [${match.players}] ${await VimeUtils.getGame(match.game, config.vimeworld.dev_token)}: ${(match.map && match.map.name) ? `${match.map.name}` : `-`}. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${dur}.`)
        }
    }

    return list
}