const config = require('../config')
const vimeLibrary = require('../libs/vimelibrary')
const axios = require('axios')
const Jimp = require('jimp')
const {Keyboard} = require('vk-io')
const fs = require('fs')
const messages = require('../libs/messages')

const VimeLibrary = new vimeLibrary.User(config.vimeworld.dev_token)
const VimeUtils = new vimeLibrary.Utils()

const vk = require('../index').vk

module.exports.info = {
    name: 'skin',
    usage: "<–∏–≥—Ä–æ–∫>",
    aliases: ['—Å–∫–∏–Ω', '–æ–¥–µ–∂–¥–∞', 'skin', '—Å–∫–µ–Ω', 'cape', '–ø–ª–∞—â'],
    description: '—Å–∫–∏–Ω –∏ –ø–ª–∞—â –∏–≥—Ä–æ–∫–∞',
    permission: 1,
    enabled: true,
    sponsor: [],
    help: true
};

module.exports.run = async (context, params) => {
    try {
        if (!params[1]) return context.reply(`üîé –í—ã –∑–∞–±—ã–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${params[0]} <–Ω–∏–∫–Ω–µ–π–º> <–∏–≥—Ä–∞>?`)

        const symbols = params[1].split('')
        if (!await messages.testUsername(params[1])) return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã, —Ü–∏—Ñ—Ä –∏ _`)

        if ((symbols.length < 3 || symbols.length > 16) && symbols[0] !== "=")
            return context.reply(`‚ö† –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3-—Ö –¥–æ 16-–∏ —Å–∏–º–≤–æ–ª–æ–≤`)

        const data = await VimeLibrary.get(params[1], 'nick')
        if (!data[0] || !data[0].id) {
            return context.reply('üîé –ò–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        }
        const rank = await VimeUtils.getRank(data[0].rank, config.vimeworld.dev_token)

        const body = axios.get(`http://skin.vimeworld.com/body/${data[0].username}.png`, {responseType: 'arraybuffer'});
        let back = axios.get(`http://skin.vimeworld.com/back/${data[0].username}.png`, {responseType: 'arraybuffer'})

        Promise.all([body, back]).then(function (values) {
            Promise.all([
                Jimp.read(values[0].data),
                Jimp.read(values[1].data),
            ])
                .then(async function (results) {
                    let cape = await axios.get(`https://skin.vimeworld.com/cape/${data[0].username}.png`, {
                        validateStatus: false,
                        responseType: 'arraybuffer'
                    })

                    let imag = new Jimp(160, 240, 'transparent')
                    if (cape.data.length > 50) {
                        let t = await Jimp.read(cape.data)
                        imag.composite(t, 0, 0)
                            .resize(109, 160)
                    }

                    let image = new Jimp(323, 320, 'white');
                    image.composite(results[0], 0, 0)
                    image.composite(results[1], 163, 0)
                    image.composite(imag, 190, 80)
                        .rgba(false)
                        .background(0xFFFFFFFF)
                        .write(`./images/${data[0].username}.jpg`);

                    vk.upload.messagePhoto({
                        source: {
                            value: fs.createReadStream(`./images/${data[0].username}.jpg`)
                        },
                    })
                        .then((attachment) => {
                            vk.api.messages.send({
                                message: `üëï –°–∫–∏–Ω ${(rank.prefix.split('').length >= 1) ? `[${rank.prefix}] ` : ``}${data[0].username}:`,
                                attachment,
                                random_id: 0,
                                peer_id: context.message.peer_id,
                                reply_to: context.message.id,
                                keyboard: Keyboard.builder().inline()
                                    .textButton({
                                        label: "üë®‚Äçüíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                        payload: `stats:${data[0].username}`,
                                        color: Keyboard.PRIMARY_COLOR
                                    })
                                    .textButton({
                                        label: "üèÖ –¢–æ–ø—ã",
                                        payload: `tops:${data[0].username}`,
                                        color: Keyboard.PRIMARY_COLOR
                                    })
                                    .row()
                                    .urlButton({
                                        label: "–°–∫–∞—á–∞—Ç—å —Å–∫–∏–Ω",
                                        url: `https://mc.vimeworld.com/launcher/skins/${data[0].username}.png`
                                    })
                                    .urlButton({
                                        label: "–°–∫–∞—á–∞—Ç—å –ø–ª–∞—â",
                                        url: `https://mc.vimeworld.com/launcher/cloaks/${data[0].username}.png`
                                    })
                            })
                            fs.unlinkSync(`./images/${data[0].username}.jpg`);
                        });
                }).catch(function (err) {
                console.error(err);
                context.reply({
                    message: `üö´ –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–∏–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n${err}`
                })
            })
        })
    } catch (e) {
        console.error(e)
        context.reply(`‚ö† –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n${e}`)
    }
};

module.exports.runPayload = async (context) => {
    this.run(context, context.messagePayload.split(':'))
};