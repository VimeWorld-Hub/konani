const VW = require('../libs/vimelibrary')
const Mess = require('../libs/messages')
const config = require('../config')
const {Keyboard} = require('vk-io')

const VimeLibrary = new VW.Guild(config.vimeworld.dev_token)

module.exports.info = {
    name: 'gs',
    usage: "<–∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞>",
    aliases: ['gs', '–≥—Å', 'guildsearch', '–≥–∏–ª—å–¥–∏—è–ø–æ–∏—Å–∫', '–ø–æ–∏—Å–∫–≥'],
    description: '–ø–æ–∏—Å–∫ –≥–∏–ª—å–¥–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑–µ',
    permission: 1,
    enabled: true,
    sponsor: [],
    help: true
};

module.exports.run = async (context, params) => {
    if (!params[1]) return context.reply(`üîé –í—ã –∑–∞–±—ã–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${params[0]} <–∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞>`)

    if (params[1].split('').length < 2) {
        context.send({
            message: `üîç –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ 2-—É—Ö —Å–∏–º–≤–æ–ª–æ–≤.`,
            reply_to: context.message.id
        });
        return
    }

    const data = await VimeLibrary.search(encodeURIComponent(params[1]))
    if (data.length < 1) return context.reply(`üîç –ì–∏–ª—å–¥–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´${params[1]}¬ª - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)

    const g = ['']

    for (const k of data) {
        g.push(`${(k.tag) ? `<${k.tag}>` : ``} ${k.name}`)
    }

    const header = (context.messagePayload)
        ? ''
        : `üîç –ì–∏–ª—å–¥–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´${params[1]}¬ª:\n\n`
    const body = g.join("\n‚óè ")
    const footer = `\n\nüìÉ –í—Å–µ–≥–æ: ${g.length}`

    const mess = new Mess.Message(header, body, footer)
    context.reply({
        message: await mess.get(),
        keyboard: Keyboard.builder()
            .textButton({
                label: "üìä –û–±–Ω–æ–≤–∏—Ç—å",
                payload: `${this.info.name}:${params[1]}`,
                color: Keyboard.SECONDARY_COLOR
            })
            .inline()
    })
};

module.exports.runPayload = async (context) => {
    this.run(context, context.messagePayload.split(':'))
};